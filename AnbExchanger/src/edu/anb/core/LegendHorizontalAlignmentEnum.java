//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.08 at 09:29:27 PM CEST 
//


package edu.anb.core;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for LegendHorizontalAlignmentEnum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="LegendHorizontalAlignmentEnum">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="LegendAlignmentFree"/>
 *     &lt;enumeration value="LegendAlignmentLeft"/>
 *     &lt;enumeration value="LegendAlignmentRight"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "LegendHorizontalAlignmentEnum")
@XmlEnum
public enum LegendHorizontalAlignmentEnum {


    /**
     * The legend is unaligned horizontally.
     * 
     */
    @XmlEnumValue("LegendAlignmentFree")
    LEGEND_ALIGNMENT_FREE("LegendAlignmentFree"),

    /**
     * The legend is aligned to the left extent of the chart.
     * 
     */
    @XmlEnumValue("LegendAlignmentLeft")
    LEGEND_ALIGNMENT_LEFT("LegendAlignmentLeft"),

    /**
     * The legend is aligned to the right extent of the chart.
     * 
     */
    @XmlEnumValue("LegendAlignmentRight")
    LEGEND_ALIGNMENT_RIGHT("LegendAlignmentRight");
    private final java.lang.String value;

    LegendHorizontalAlignmentEnum(java.lang.String v) {
        value = v;
    }

    public java.lang.String value() {
        return value;
    }

    public static LegendHorizontalAlignmentEnum fromValue(java.lang.String v) {
        for (LegendHorizontalAlignmentEnum c: LegendHorizontalAlignmentEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
